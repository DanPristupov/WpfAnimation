<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!-- ListBox item style-->
    <DataTemplate x:Key="ListItemDataTemplate">
        <Border BorderBrush="#F2F2F2" Padding="5" BorderThickness="0 1 0 1" Margin="0 -1 0 0" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="50"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border Grid.Column="0">
                    <Border.BitmapEffect>
                        <DropShadowBitmapEffect Color="Black" Softness="0.25" ShadowDepth="0" Opacity="0.3" />
                    </Border.BitmapEffect>
                    <Image Source="{Binding Avatar}" Width="35" Height="35" />
                </Border>
                <StackPanel Grid.Column="1">
                    <TextBlock Text="{Binding UserName}"/>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding CommitId}" />
                        <TextBlock x:Name="CommitDescription" Text="{Binding Description}" Foreground="Black" />
                    </StackPanel>
                </StackPanel>
                <TextBlock Grid.Column="2" Text="{Binding Date, StringFormat=\{0:dd/MM/yy\}}"  />
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}"
                                   Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}, Path=IsKeyboardFocusWithin}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" TargetName="CommitDescription" Value="White"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
        <DataTemplate.Resources>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="Gray"/>
                <Setter Property="FontFamily" Value="Helvetica"/>
                <Setter Property="Margin" Value="2 0 2 0"/>
                <Setter Property="FontSize" Value="13"/>
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}"
                                   Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}, Path=IsKeyboardFocusWithin}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="White"/>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>
        </DataTemplate.Resources>
    </DataTemplate>
    
    <!-- ToggleButton style-->
    <ControlTemplate x:Key="ToogleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" 
					Background="{TemplateBinding Background}" 
                    BorderThickness="{TemplateBinding BorderThickness}"
					SnapsToDevicePixels="true"
					CornerRadius="0">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="false"/>
                    <Condition Property="IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="#E6E6E6"/>
                <Setter Property="Foreground" Value="DarkGray"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="#7A7A7A"/>
                <Setter Property="BorderBrush" Value="#7A7A7A"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ToogleButtonRightTemplate" TargetType="{x:Type ToggleButton}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" 
					Background="{TemplateBinding Background}" 
                    BorderThickness="{TemplateBinding BorderThickness}"
					SnapsToDevicePixels="true"
					CornerRadius="0 3 3 0">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="false"/>
                    <Condition Property="IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="#E6E6E6"/>
                <Setter Property="Foreground" Value="DarkGray"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="#7A7A7A"/>
                <Setter Property="BorderBrush" Value="#7A7A7A"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ToogleButtonLeftTemplate" TargetType="{x:Type ToggleButton}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" 
					Background="{TemplateBinding Background}" 
                    BorderThickness="{TemplateBinding BorderThickness}"
					SnapsToDevicePixels="true"
					CornerRadius="3 0 0 3">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" 
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="false"/>
                    <Condition Property="IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="#E6E6E6"/>
                <Setter Property="Foreground" Value="DarkGray"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Background" Value="#7A7A7A"/>
                <Setter Property="BorderBrush" Value="#7A7A7A"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ToogleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Foreground" Value="#474747"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#B4B4B4"/>
        <Setter Property="Padding" Value="7 0 7 1"/>
        <Setter Property="Margin" Value="0 0 -1 0"/>
        <Setter Property="Template" Value="{StaticResource ToogleButtonTemplate}"/>
    </Style>
    
    <!-- Button style-->
    <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
        <Border Background="{TemplateBinding Background}" 
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}"
					CornerRadius="3">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}" 
							RecognizesAccessKey="True" 
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="BorderBrush" Value="#7A7A7A"/>
                <Setter Property="Background" Value="#7A7A7A"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="#E6E6E6"/>
                <Setter Property="Foreground" Value="DarkGray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Foreground" Value="#474747"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#B4B4B4"/>
        <Setter Property="Padding" Value="9 0 9 1"/>
        <Setter Property="Margin" Value="0 0 -1 0"/>
        <Setter Property="Template" Value="{StaticResource ButtonTemplate}"/>
    </Style>
</ResourceDictionary>